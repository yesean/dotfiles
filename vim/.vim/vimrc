syntax enable                       " turns on syntax highlighting
filetype plugin indent on           " activate filetype detection
set belloff=all                     " turns off error bells
set softtabstop=2                   " set tabs to 2 spaces
set shiftwidth=2                    " set shift indent to 2 spaces
set expandtab                       " convert tabs to spaces
set autoindent                      " maintains indent from prev line
set smartindent                     " intelligently indents based on prev line
set relativenumber                  " display relative line number
set number                          " display current line number
set ruler                           " bottom right ruler
set colorcolumn=80                  " column 80 highlight
set nowrap                          " turn off word wrapping
set noswapfile                      " creates new buffer without swap file
set ignorecase                      " when searching, ignore case
set smartcase                       " when searching, apply case if uppercase is specified
set timeoutlen=300                  " reduce esc delay (mapping delay)
set ttimeoutlen=0                   " reduce esc delay (keycode delay)
set backspace=indent,eol,start      " enables backspace in insert
set mouse=a                         " enable mouse support
set scrolloff=15                    " start scrolling 15 lines from edge
set exrc                            " automatically source local .vimrc
set nohlsearch                      " turn off search highlighting
set hidden                          " hides all buffers in background
set signcolumn=yes                  " add extra left column for messages
set splitright                      " open vertical splits to the right
set splitbelow                      " open horizontal splits below
set undofile                        " use permanent undo file
set undodir=~/.vim/undo             " specify undo directory
set background=dark

" cursor modes
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\e[5 q\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\"
else
  let &t_SI = "\e[5 q"
  let &t_EI = "\e[2 q"
endif

" theme
if exists('+termguicolors')
  let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors                       " sets correct color codes
endif

" set leader, localleader key to space
let mapleader = " "
let maplocalleader = " "

" change window shortcut
nnoremap <Leader>h :wincmd h<CR>
nnoremap <Leader>j :wincmd j<CR>
nnoremap <Leader>k :wincmd k<CR>
nnoremap <Leader>l :wincmd l<CR>

" yank/paste with clipboard
function! ClipboardYank()
  call system('xclip -i -selection clipboard', @@)
endfunction
function! ClipboardPaste()
  let @@ = system('xclip -o -selection clipboard')
endfunction
vnoremap <silent> <leader>y y:call ClipboardYank()<cr>
vnoremap <silent> <leader>d d:call ClipboardYank()<cr>
nnoremap <silent> <leader>p :cal<leader> ClipboardPaste()<cr>p

" vim-plug
let g:plug_url_format = 'git@github.com:%s.git'

colorscheme desert
